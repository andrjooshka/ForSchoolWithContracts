#####
By pages
Clients
	all clients (active contracts, balance, state, date of first contract, novice status)
	clients by status
	clients by teacher
	clients by date of planned payment
	clients by date of first contract
	clients by name contaning string
	contracts counters:
		active
		frozen
		total
	clients counters:
		new
		continuers
		total
	financial income
ClientPage
	client (date of first contract)
	teachers by client (names)
	contracts by client (teacher, discipline (event_type), contract_type, date, number of lessons, balance, events, payments)
	events by contract
		lessons remain
		money for events done
	payments by contract
		total money
	counters:
		active/inactive contracts
	balance (payments - events cost)
CRUD
	all clients (name)
	all teachers (name, schedule, work_state)
	all events (teacher, school, room, discipline (event_type), state, money, school money, clients)
	all disciplines (event types) (title, price, school share)
	all facilities (title, number of classes)
Reports
	Clients with two or less events in active contract
	Clients with payments in two weeks or former
	Debtors
	Teachers who ought to provide events (whom events were fired by their fault)
Schedules
	all teachers (teacher name and schedule)
Statistics
	all events (id, teacher name, price, facility, room, date, state, comment, discipline (event type), school percent, clients)
	events by:
		teacher
		state
		facility
		room
		discipline
		date interval
	counters:
		total events
		done/undone
		fired by client
		fired by teacher
		total money
		school money
		teachers money
		given percent
Teachers
	all teachers (teacher name)
TeacherPage
	schedule
	addclient
	teacher properties
	clients by teacher
	contracts by client
	contracts by client and teacher
	events by contract
	events by teacher and dates:
		events done
		days done
		events canceled
		derivatives:
			money for teacher and school
	comments
#####
Grouped by entities related
Clients
	all clients
	per unit:
		name
		contracts (all/active/frozen)
		balance
		state + novice status
		date of first contract
		teachers (names)
		contracts
	filtered by:
		status
		teacher
		date of first contract (interval)
		date of planned payment (interval)
		name containting string
	counters:
		new/continuers/total
		return
Contracts
	per unit:
		teacher name
		discipline (event_type)
		contact_type
		date
		number of lessons
		total price
		balance
		events
		payments
	filtered by:
		client
		client and teacher
		N or less events in active contract
		planned payments in two weeks or earlier
		debtors
	counters:
		state (active/frozen/canceled/complete/total)
		balance (payments - events cost)
		remaining events
		money for events done
Teachers
	all teachers
	per unit:
		name
		schedule
		state
	filtered by:
		who ought to provide Events
	counters:
Events
	all events
	per unit:
		id
		teacher name
		price
		facility/room
		date
		state
		comment
		discipline (event type)
		school percent
		clients
	filtered by:
		contract
		teacher
		state
		facility/room
		discipline
		date interval
	counters:
		state (done/undone/total)
		failed by Client
		failed by Teacher
		money (earned/loss)
		school money
		teachers money
		given percent
		days
Payments
	per unit:
	filtered by:
		contract
	counters:
		money
#####
Detailed
Clients
	all clients | dao
	per unit:
		name | getter
		contracts (all/active/frozen) | mediator
		balance | mediator (summ of contract balances)
		state + novice status | function based on count of active, freezed, or canceled contracts
		date of first contract | contractMed.filter(Client c).earliest
		teachers (names) |  function like teacherFromContract
		active contracts with balance | balance of contract provided through contract mediator
	filtered by:
		status
			def:
				if (client.inactive) state = inactive
				else if (client.activeContracts.count > 0)
					if(client.contracts contains (finished || freezed || canceled) && !trial contract)
						state = continuer
					else state = novice
				else if (client.freezedContracts.count > 0) state = frozen
				else if (client.trialContracts.count > 0 && client.contracts(!trial).count==0) state = trial
				else state = undefined
		teacher | from contractMed.filter(Client c).filter(Teacher t)
		date of first contract (interval) | get List of contractMed.filter(Client c).earliestDate(), than filter
		date of planned payment (interval) | get all Payments, filter by planned, filter by date, then map to Contracts, then map to Clients
		name containting string | no comment
		debtors | clientMed.filter(balance<0)
	counters:
		new/continuers/total | size of Lists of Clients filtered by state && date interval
		return | paymentMed
Contracts
	per unit:
		teacher name | entity level
		discipline (event_type) | entity level
		contract_type | entity level
		date | entity level
		number of lessons | el
		total price | el
		balance | eventMed.filter(Contract).filter(state=complete) + paymentMed.filter(Contract).filter(!Planned)
		events | eventMed.filter(Contract)
		payments | paymentMed.filter(Contract)
	filtered by:
		client | contractMed.filter(Client)
		client and teacher | contractMed.filter(Client).filter(Teacher)
		N or less events in active contract | contractMed.filter(state=active||frozen)
		planned payments in two weeks or earlier | paymentMed.filter(state=planned).filter(Date).map(Contracts)
	counters:
		state (active/frozen/canceled/complete/trial/total) | filter(state).count
		remaining events | eventMed.filter(Contract).filter
		money for events done | eventMed.filter(Contract).filter(complete).countMoney
Teachers
	all teachers
	per unit:
		name | el
		schedule | el
		state | el
	filtered by:
		who ought to provide Events
	counters:
Events
	all events
	per unit:
		id | el
		teacher name | el
		price | el
		facility/room | el
		date | el
		state | el
		comment | el
		discipline (event type) | el
		school percent | el
		clients | event.getContracts.GetClient
	filtered by:
		contract | eventMed.filter(Contract)
		teacher | eventMed.filter(Teacher)
		state | eventMed.filter(state)
		facility/room | eventMed.filter(Facility/Room)
		discipline | eventMed.filter(discipline (EventType))
		date interval | dateFilter.filter(date1,date2)
	counters:
		state (done/undone/total)
		failed by Client
		failed by Teacher
		money (earned/loss)
		school money
		teachers money
		given percent
		days
Payments
	per unit:
		amount
		date
		planned
		comment
	filtered by:
		contract
		planned
		date
	counters:
		money
		return























